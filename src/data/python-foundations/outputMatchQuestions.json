
[
  {
    "code": "print(2 ** 3)",
    "options": ["6", "8", "9", "23"],
    "correct": "8",
    "explanation": "The `**` operator is for exponentiation. So, 2 raised to the power of 3 is 2 * 2 * 2 = 8."
  },
  {
    "code": "x = 10\ny = 3\nprint(x // y)",
    "options": ["3.33", "3", "1", "0"],
    "correct": "3",
    "explanation": "The `//` operator is for floor division. 10 divided by 3 is 3.33..., and the floor value (largest integer less than or equal to it) is 3."
  },
  {
    "code": "print('Hello' + 'World')",
    "options": ["HelloWorld", "Hello World", "'HelloWorld'", "Error"],
    "correct": "HelloWorld",
    "explanation": "The `+` operator concatenates strings. 'Hello' and 'World' are joined without a space."
  },
  {
    "code": "my_list = [1, 2, 3, 4]\nprint(my_list[1:3])",
    "options": ["[1, 2, 3]", "[2, 3]", "[1, 2]", "[2, 3, 4]"],
    "correct": "[2, 3]",
    "explanation": "List slicing `my_list[start:end]` extracts elements from index `start` up to (but not including) index `end`. So, `my_list[1:3]` gets elements at index 1 and 2."
  },
  {
    "code": "a = True\nb = False\nprint(a and not b)",
    "options": ["True", "False", "Error", "None"],
    "correct": "True",
    "explanation": "`not b` evaluates to `not False`, which is `True`. Then, `a and True` (since `a` is `True`) evaluates to `True and True`, which is `True`."
  },
  {
    "code": "for i in range(3):\n  print(i)",
    "options": ["0\n1\n2", "1\n2\n3", "0\n1\n2\n3", "1\n2"],
    "correct": "0\n1\n2",
    "explanation": "`range(3)` generates numbers 0, 1, and 2. The loop prints each of these on a new line."
  },
  {
    "code": "def greet(name):\n  return f\"Hi, {name}!\"\nprint(greet(\"AI\"))",
    "options": ["Hi, AI!", "greet(\"AI\")", "Hi, {name}!", "Error"],
    "correct": "Hi, AI!",
    "explanation": "The function `greet` is called with the argument \"AI\". It returns an f-string 'Hi, AI!', which is then printed."
  },
  {
    "code": "s = \"Python\"\nprint(s[-1])",
    "options": ["P", "n", "s", "Error"],
    "correct": "n",
    "explanation": "Negative indexing in Python strings counts from the end. `s[-1]` refers to the last character, which is 'n'."
  },
  {
    "code": "numbers = [10, 20, 5, 15]\nnumbers.sort()\nprint(numbers[0])",
    "options": ["10", "20", "5", "15"],
    "correct": "5",
    "explanation": "The `sort()` method sorts the list in place in ascending order. After sorting, `numbers` becomes `[5, 10, 15, 20]`. `numbers[0]` is the first element, which is 5."
  },
  {
    "code": "d = {\"apple\": 1, \"banana\": 2}\nprint(d.get(\"cherry\", 0))",
    "options": ["1", "2", "0", "Error"],
    "correct": "0",
    "explanation": "The `get()` method for dictionaries returns the value for a key if it exists. If the key is not found, it returns the default value provided (in this case, 0). 'cherry' is not in the dictionary."
  },
  {
    "code": "text = \"PYTHON\"\nprint(text.lower())",
    "options": ["PYTHON", "python", "PyThOn", "Error"],
    "correct": "python",
    "explanation": "The `lower()` string method converts all uppercase characters in a string to lowercase."
  },
  {
    "code": "my_set = {1, 2, 2, 3}\nprint(len(my_set))",
    "options": ["3", "4", "2", "Error"],
    "correct": "3",
    "explanation": "Sets in Python store only unique elements. Duplicate values (like the second '2') are ignored. So, the set contains {1, 2, 3}, and its length is 3."
  },
  {
    "code": "count = 0\nwhile count < 2:\n  print(count)\n  count += 1",
    "options": ["0\n1", "0\n1\n2", "1\n2", "0"],
    "correct": "0\n1",
    "explanation": "The loop starts with count = 0. It prints 0, increments count to 1. Prints 1, increments count to 2. The condition count < 2 is now false, so the loop terminates."
  },
  {
    "code": "fruits = [\"apple\", \"banana\"]\nfruits.append(\"cherry\")\nprint(fruits[2])",
    "options": ["apple", "banana", "cherry", "Error"],
    "correct": "cherry",
    "explanation": "The `append()` method adds \"cherry\" to the end of the list. So, `fruits` becomes `[\"apple\", \"banana\", \"cherry\"]`. `fruits[2]` accesses the element at index 2, which is \"cherry\"."
  },
  {
    "code": "print(10 % 4)",
    "options": ["2.5", "2", "1", "0"],
    "correct": "2",
    "explanation": "The `%` (modulus) operator returns the remainder of a division. 10 divided by 4 is 2 with a remainder of 2."
  },
  {
    "code": "word = \"Programming\"\nprint(word.find(\"g\"))",
    "options": ["3", "-1", "2", "Error"],
    "correct": "3",
    "explanation": "The `find()` string method returns the index of the first occurrence of the substring. 'g' is at index 3."
  },
  {
    "code": "values = [x*x for x in range(3)]\nprint(values)",
    "options": ["[0, 1, 4]", "[0, 1, 2]", "[1, 4, 9]", "[0, 2, 4]"],
    "correct": "[0, 1, 4]",
    "explanation": "This is a list comprehension. `range(3)` generates 0, 1, 2. For each x, `x*x` is calculated: 0*0=0, 1*1=1, 2*2=4. The resulting list is [0, 1, 4]."
  },
  {
    "code": "data = {\"a\": 1, \"b\": 2}\ndata.update({\"c\": 3, \"a\": 5})\nprint(data[\"a\"])",
    "options": ["1", "3", "5", "Error"],
    "correct": "5",
    "explanation": "The `update()` method merges dictionaries. If a key exists, its value is updated. Key 'a' is updated from 1 to 5."
  },
  {
    "code": "def scope_test():\n  x = 10\n  print(x)\n\nx = 20\nscope_test()\nprint(x)",
    "options": ["10\n20", "20\n10", "10\n10", "20\n20"],
    "correct": "10\n20",
    "explanation": "Inside `scope_test()`, `x` is local and set to 10, so it prints 10. The `x` outside the function (global scope) remains 20 and is printed last."
  },
  {
    "code": "set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nprint(len(set1.intersection(set2)))",
    "options": ["1", "2", "3", "5"],
    "correct": "1",
    "explanation": "The `intersection()` method returns common elements. Only `3` is common to both sets. The length of the intersection `{3}` is 1."
  },
  {
    "code": "print(bool(0) or bool(\"\"))",
    "options": ["True", "False", "Error", "None"],
    "correct": "False",
    "explanation": "`bool(0)` is False. `bool(\"\")` (empty string) is False. `False or False` evaluates to False."
  },
  {
    "code": "string = \"hello\"\nprint(string.capitalize())",
    "options": ["hello", "Hello", "HELLO", "hELLO"],
    "correct": "Hello",
    "explanation": "The `capitalize()` string method converts the first character to uppercase and all other characters to lowercase."
  },
  {
    "code": "tuple_val = (1, [2, 3], 4)\ntuple_val[1][0] = 5\nprint(tuple_val[1][0])",
    "options": ["2", "3", "5", "Error"],
    "correct": "5",
    "explanation": "Tuples are immutable, but if they contain mutable objects (like a list), those objects can be changed. `tuple_val[1]` refers to the list `[2, 3]`. `tuple_val[1][0] = 5` changes the first element of this inner list."
  },
  {
    "code": "print(\"{1}{0}\".format('a', 'b'))",
    "options": ["ab", "ba", "10", "Error"],
    "correct": "ba",
    "explanation": "The `.format()` method substitutes placeholders. `{1}` refers to the argument at index 1 ('b'), and `{0}` refers to the argument at index 0 ('a')."
  },
  {
    "code": "x = 5\ny = x\ny += 2\nprint(x)",
    "options": ["5", "7", "2", "Error"],
    "correct": "5",
    "explanation": "Integers are immutable. When `y = x`, `y` gets the value of `x`. When `y += 2`, `y` is reassigned to a new integer `7`. `x` remains unchanged."
  }
]
