
[
  {
    "initialCode": "for i in range(5)\n    print(i)",
    "description": "This code should print numbers from 0 to 4, each on a new line. There's an indentation issue.",
    "expectedOutput": "0\n1\n2\n3\n4",
    "solution": "for i in range(5):\n    print(i)"
  },
  {
    "initialCode": "def greet(name)\n  print(\"Hello, \" + name)\n\ngreet(\"User\")",
    "description": "The function definition is missing something at the end of the first line. It should greet the user.",
    "expectedOutput": "Hello, User",
    "solution": "def greet(name):\n  print(\"Hello, \" + name)\n\ngreet(\"User\")"
  },
  {
    "initialCode": "x = \"10\"\ny = \"20\"\nprint(x + y)",
    "description": "This code aims to add two numbers, but they are currently strings. The output should be their numerical sum.",
    "expectedOutput": "30",
    "solution": "x = \"10\"\ny = \"20\"\nprint(int(x) + int(y))"
  },
  {
    "initialCode": "count = 5\nwhle count > 0:\n  print(count)\n  count -= 1",
    "description": "There's a typo in the loop keyword. It should count down from 5 to 1.",
    "expectedOutput": "5\n4\n3\n2\n1",
    "solution": "count = 5\nwhile count > 0:\n  print(count)\n  count -= 1"
  },
  {
    "initialCode": "my_list = [1, 2, 3, 4]\nprint(my_list(0))",
    "description": "Accessing list elements uses square brackets, not parentheses. This should print the first element of the list.",
    "expectedOutput": "1",
    "solution": "my_list = [1, 2, 3, 4]\nprint(my_list[0])"
  },
  {
    "initialCode": "age = 25\nprint(\"My age is \" + age)",
    "description": "This code tries to print a string and a number. Remember how to combine them correctly. The expected output is a string like 'My age is 25'.",
    "expectedOutput": "My age is 25",
    "solution": "age = 25\nprint(\"My age is \" + str(age))"
  },
  {
    "initialCode": "items = [\"apple\", \"banana\", \"cherry\"]\nfor i in range(4): # Intentionally one too many\n  print(items[i])",
    "description": "This code attempts to print all items in a list, but there's an issue with the loop range causing an error. It should print each fruit on a new line.",
    "expectedOutput": "apple\nbanana\ncherry",
    "solution": "items = [\"apple\", \"banana\", \"cherry\"]\nfor i in range(len(items)):\n  print(items[i])"
  },
  {
    "initialCode": "x = 5\nif x = 10:\n  print(\"x is 10\")\nelse:\n  print(\"x is not 10\")",
    "description": "This code uses the wrong operator in the `if` condition. It should compare `x` to 10, not assign it. The expected output reflects the correct comparison.",
    "expectedOutput": "x is not 10",
    "solution": "x = 5\nif x == 10:\n  print(\"x is 10\")\nelse:\n  print(\"x is not 10\")"
  },
  {
    "initialCode": "city = New York\nprint(city)",
    "description": "A string value is missing its quotes. The variable 'city' should hold the string 'New York'.",
    "expectedOutput": "New York",
    "solution": "city = \"New York\"\nprint(city)"
  },
  {
    "initialCode": "def multiply(a, b):\n  return a * b\n\n# Fix the call below to make it work\nresult = multiply(5)\nprint(result)",
    "description": "The `multiply` function expects two arguments. Fix the call to `multiply` by providing a second argument (e.g., 3) so it prints their product.",
    "expectedOutput": "15",
    "solution": "def multiply(a, b):\n  return a * b\n\n# Fix the call below to make it work\nresult = multiply(5, 3)\nprint(result)"
  },
  {
    "initialCode": "def greet(name):\n  print(f\"Hello, {name}\")\n\ngreet()",
    "description": "The `greet` function expects a `name` argument, but it's called without one. Fix the call by providing a name.",
    "expectedOutput": "Hello, World",
    "solution": "def greet(name):\n  print(f\"Hello, {name}\")\n\ngreet(\"World\")"
  },
  {
    "initialCode": "my_list = [10, 20, 30]\nprint(my_list[3])",
    "description": "This code tries to access an element at index 3 in a list that only has elements up to index 2. Adjust the index to access an existing element.",
    "expectedOutput": "30",
    "solution": "my_list = [10, 20, 30]\nprint(my_list[2])"
  },
  {
    "initialCode": "i = 0\nwhile i < 5:\n  print(\"Looping...\")\n  # Missing increment for i",
    "description": "This `while` loop is missing a way to change the value of `i`, so `i < 5` will always be true, causing an infinite loop. Add `i += 1` inside the loop to fix it.",
    "expectedOutput": "Looping...\nLooping...\nLooping...\nLooping...\nLooping...",
    "solution": "i = 0\nwhile i < 5:\n  print(\"Looping...\")\n  i += 1"
  },
  {
    "initialCode": "student = {\"name\": \"Alex\", \"age\": 22}\nprint(student[\"grade\"])",
    "description": "The code tries to access the key 'grade' which doesn't exist in the `student` dictionary. Change the code to access an existing key like 'name' or 'age'.",
    "expectedOutput": "Alex",
    "solution": "student = {\"name\": \"Alex\", \"age\": 22}\nprint(student[\"name\"]) # Or student[\"age\"] to output 22"
  },
  {
    "initialCode": "color = \"blue\"\nif color == \"Blue\":\n  print(\"The color is blue.\")\nelse:\n  print(\"The color is not blue.\")",
    "description": "String comparison in Python is case-sensitive. 'blue' is not the same as 'Blue'. Fix the comparison to make the condition true.",
    "expectedOutput": "The color is blue.",
    "solution": "color = \"blue\"\nif color == \"blue\":\n  print(\"The color is blue.\")\nelse:\n  print(\"The color is not blue.\")"
  }
]
